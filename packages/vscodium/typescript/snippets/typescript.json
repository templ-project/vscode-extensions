{
  "0": {
    "prefix": "interface",
    "body": [
      "interface ${1:InterfaceName} {",
      "  ${2:property}: ${3:type};",
      "}"
    ],
    "description": "TypeScript interface definition"
  },
  "1": {
    "prefix": "type",
    "body": [
      "type ${1:TypeName} = ${2:type};"
    ],
    "description": "TypeScript type alias"
  },
  "2": {
    "prefix": "enum",
    "body": [
      "enum ${1:EnumName} {",
      "  ${2:VALUE1} = '${3:value1}',",
      "  ${4:VALUE2} = '${5:value2}'",
      "}"
    ],
    "description": "TypeScript enum definition"
  },
  "3": {
    "prefix": "gfn",
    "body": [
      "function ${1:functionName}<${2:T}>(${3:param}: ${2:T}): ${4:ReturnType} {",
      "  ${5:// function body}",
      "}"
    ],
    "description": "TypeScript generic function"
  },
  "4": {
    "prefix": "class",
    "body": [
      "class ${1:ClassName} {",
      "  constructor(private ${2:param}: ${3:type}) {}",
      "",
      "  ${4:methodName}(): ${5:ReturnType} {",
      "    ${6:// method body}",
      "  }",
      "}"
    ],
    "description": "TypeScript class with typed constructor"
  },
  "5": {
    "prefix": "asyncts",
    "body": [
      "async function ${1:functionName}(${2:param}: ${3:ParamType}): Promise<${4:ReturnType}> {",
      "  ${5:// async function body}",
      "}"
    ],
    "description": "TypeScript async function with return type"
  }
}

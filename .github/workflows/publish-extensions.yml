name: Build, Version, and Publish Extensions

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-version-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm i

      - name: Generate extensions
        run: |
          npx run-s version:store clean generate

      - name: Workspaces List
        id: workspaces
        run: |
          workspaces=(".:node")
          for ide in vscode vscodium; do
            for extension in generic-essential generic-extended javascript typescript golang python; do
              workspaces+=("packages/$ide/$extension:node")
            done
          done
          workspaces_string=$(IFS=','; echo "${workspaces[*]}")
          echo "workspaces=$workspaces_string" | tee -a $GITHUB_OUTPUT

      - name: Version Update
        id: version_update
        uses: dragoscops/version-update@v2
        with:
          github_token: ${{ secrets.GH_TOKEN }}
          workspaces: ${{ steps.workspaces.outputs.workspaces }}

      - name: Build Extensions
        if: ${{ steps.version_update.outputs.tag != '' }}
        run: |
          npx run-s compile:all package

      - name: Install publishing tools
        if: ${{ steps.version_update.outputs.tag != '' }}
        run: |
          npm install -g @vscode/vsce ovsx

      - name: Publish to VS Code Marketplace
        if: ${{ steps.version_update.outputs.tag != '' }}
        uses: ./.github/actions/publish-extensions
        with:
          marketplace: vscode
          packages-path: packages/vscode
          dist-path: dist
          vsce-token: ${{ secrets.VSCE_PAT }}

      - name: Publish to Open VSX Registry
        if: ${{ steps.version_update.outputs.tag != '' }}
        uses: ./.github/actions/publish-extensions
        with:
          marketplace: vscodium
          packages-path: packages/vscodium
          dist-path: dist
          ovsx-token: ${{ secrets.OVSX_PAT }}

      - name: Create GitHub Release
        id: create_release
        if: ${{ steps.version_update.outputs.tag != '' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version_update.outputs.tag }}
          release_name: Release ${{ steps.version_update.outputs.tag }}
          draft: false
          prerelease: false

      - name: Generate SHA files
        if: ${{ steps.version_update.outputs.tag != '' }}
        run: |
          cd dist
          for file in *; do
            if [ -f "$file" ]; then
              sha256sum "$file" > "$file.sha256"
            fi
          done
          cd ..

      - name: List dist files
        id: dist_files
        if: ${{ steps.version_update.outputs.tag != '' }}
        run: |
          echo "files=$(ls dist | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT

      - name: Upload dist artifacts
        if: ${{ steps.version_update.outputs.tag != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist/
          retention-days: 1

    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      dist_files: ${{ steps.dist_files.outputs.files }}
      tag: ${{ steps.version_update.outputs.tag }}

  upload-assets:
    needs: build-version-publish
    runs-on: ubuntu-latest
    if: needs.build-version-publish.outputs.tag != ''
    strategy:
      matrix:
        file: ${{ fromJson(needs.build-version-publish.outputs.dist_files) }}
    steps:
      - name: Download specific file
        uses: actions/download-artifact@v4
        with:
          name: dist-files
          path: dist/
          pattern: ${{ matrix.file }}

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.build-version-publish.outputs.upload_url }}
          asset_path: dist/${{ matrix.file }}
          asset_name: ${{ matrix.file }}
          asset_content_type: application/octet-stream

      - name: Confirm upload
        run: |
          echo "::notice::ðŸ“Ž Successfully uploaded ${{ matrix.file }} to GitHub release"

name: Build, Version, and Publish Extensions

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-version-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm i

      - name: Generate extensions
        run: |
          npx run-s version:store clean generate

      - name: Workspaces List
        id: workspaces
        run: |
          workspaces=(".:node")
          for ide in vscode vscodium; do
            for extension in generic-essential generic-extended javascript typescript golang python; do
              workspaces+=("packages/$ide/$extension:node")
            done
          done
          workspaces_string=$(IFS=','; echo "${workspaces[*]}")
          echo "workspaces=$workspaces_string" | tee -a $GITHUB_OUTPUT

      - name: Version Update
        id: version_update
        uses: dragoscops/version-update@v2
        with:
          github_token: ${{ secrets.GH_TOKEN }}
          workspaces: ${{ steps.workspaces.outputs.workspaces }}

      - name: Build Extensions
        if: ${{ steps.version_update.outputs.tag != '' }}
        run: |
          npx run-s compile:all package

      - name: Install publishing tools
        if: ${{ steps.version_update.outputs.tag != '' }}
        run: |
          npm install -g @vscode/vsce ovsx

      - name: Publish to VS Code Marketplace
        if: ${{ steps.version_update.outputs.tag != '' }}
        run: |
          echo "::group::🚀 Publishing to VS Code Marketplace"

          PUBLISHED_COUNT=0
          SKIPPED_COUNT=0

          for extension_dir in packages/vscode/*/; do
            if [ -d "$extension_dir" ]; then
              EXTENSION_NAME=$(basename "$extension_dir")
              PACKAGE_PATH="$extension_dir/package.json"
              
              echo "::group::🔍 Checking VS Code Marketplace for $EXTENSION_NAME"
              
              # Read extension info from source package.json
              PUBLISHER=$(jq -r '.publisher' "$PACKAGE_PATH")
              NAME=$(jq -r '.name' "$PACKAGE_PATH")
              VERSION=$(jq -r '.version' "$PACKAGE_PATH")
              
              echo "📦 Extension: $PUBLISHER.$NAME v$VERSION"
              
              # Check current published version (handle first-time publishing)
              echo "🔍 Checking if extension exists on VS Code Marketplace..."
              if vsce show "$PUBLISHER.$NAME" --json >/dev/null 2>&1; then
                CURRENT_VERSION=$(vsce show "$PUBLISHER.$NAME" --json | jq -r '.versions[0].version')
                echo "✅ Found existing version: $CURRENT_VERSION"
              else
                CURRENT_VERSION="none"
                echo "🆕 Extension not found - this will be the first publication"
              fi
              
              if [ "$CURRENT_VERSION" != "$VERSION" ]; then
                echo "::notice::✅ Publishing $PUBLISHER.$NAME v$VERSION to VS Code Marketplace (current: $CURRENT_VERSION)"
                VSIX_FILE="dist/$EXTENSION_NAME-vscode-$VERSION.vsix"
                vsce publish --packagePath "$VSIX_FILE"
                echo "::notice::🎉 Successfully published $PUBLISHER.$NAME v$VERSION to VS Code Marketplace"
                ((PUBLISHED_COUNT++))
              else
                echo "::warning::⏭️ Skipping $PUBLISHER.$NAME - version $VERSION already published on VS Code Marketplace"
                ((SKIPPED_COUNT++))
              fi
              
              echo "::endgroup::"
            fi
          done

          echo "::endgroup::"
          echo "::notice::📊 VS Code Marketplace Summary: $PUBLISHED_COUNT extensions published, $SKIPPED_COUNT skipped"
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}

      - name: Publish to Open VSX Registry
        if: ${{ steps.version_update.outputs.tag != '' }}
        run: |
          echo "::group::� Publishing to Open VSX Registry"

          PUBLISHED_COUNT=0
          SKIPPED_COUNT=0

          for extension_dir in packages/vscodium/*/; do
            if [ -d "$extension_dir" ]; then
              EXTENSION_NAME=$(basename "$extension_dir")
              PACKAGE_PATH="$extension_dir/package.json"
              
              echo "::group::🔍 Checking Open VSX Registry for $EXTENSION_NAME"
              
              # Read extension info from source package.json
              PUBLISHER=$(jq -r '.publisher' "$PACKAGE_PATH")
              NAME=$(jq -r '.name' "$PACKAGE_PATH")
              VERSION=$(jq -r '.version' "$PACKAGE_PATH")
              
              echo "📦 Extension: $PUBLISHER.$NAME v$VERSION"
              
              # Check current published version on Open VSX (handle first-time publishing)
              echo "🔍 Checking if extension exists on Open VSX Registry..."
              HTTP_STATUS=$(curl -s -o /tmp/ovsx_response.json -w "%{http_code}" "https://open-vsx.org/api/$PUBLISHER/$NAME")
              if [ "$HTTP_STATUS" = "200" ]; then
                CURRENT_VERSION=$(jq -r '.version' /tmp/ovsx_response.json)
                echo "✅ Found existing version: $CURRENT_VERSION"
              else
                CURRENT_VERSION="none"
                echo "🆕 Extension not found - this will be the first publication"
              fi
              rm -f /tmp/ovsx_response.json
              
              if [ "$CURRENT_VERSION" != "$VERSION" ]; then
                echo "::notice::✅ Publishing $PUBLISHER.$NAME v$VERSION to Open VSX Registry (current: $CURRENT_VERSION)"
                VSIX_FILE="dist/$EXTENSION_NAME-vscodium-$VERSION.vsix"
                ovsx publish "$VSIX_FILE"
                echo "::notice::🎉 Successfully published $PUBLISHER.$NAME v$VERSION to Open VSX Registry"
                ((PUBLISHED_COUNT++))
              else
                echo "::warning::⏭️ Skipping $PUBLISHER.$NAME - version $VERSION already published on Open VSX Registry"
                ((SKIPPED_COUNT++))
              fi
              
              echo "::endgroup::"
            fi
          done

          echo "::endgroup::"
          echo "::notice::📊 Open VSX Registry Summary: $PUBLISHED_COUNT extensions published, $SKIPPED_COUNT skipped"
        env:
          OVSX_PAT: ${{ secrets.OVSX_PAT }}

      - name: Create GitHub Release
        id: create_release
        if: ${{ steps.version_update.outputs.tag != '' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version_update.outputs.tag }}
          release_name: Release ${{ steps.version_update.outputs.tag }}
          draft: false
          prerelease: false

      - name: Generate SHA files
        if: ${{ steps.version_update.outputs.tag != '' }}
        run: |
          cd dist
          for file in *; do
            if [ -f "$file" ]; then
              sha256sum "$file" > "$file.sha256"
            fi
          done
          cd ..

      - name: List dist files
        id: dist_files
        if: ${{ steps.version_update.outputs.tag != '' }}
        run: |
          echo "files=$(ls dist | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT

      - name: Upload dist artifacts
        if: ${{ steps.version_update.outputs.tag != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist/
          retention-days: 1

    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      dist_files: ${{ steps.dist_files.outputs.files }}
      tag: ${{ steps.version_update.outputs.tag }}

  upload-assets:
    needs: build-version-publish
    runs-on: ubuntu-latest
    if: needs.build-version-publish.outputs.tag != ''
    strategy:
      matrix:
        file: ${{ fromJson(needs.build-version-publish.outputs.dist_files) }}
    steps:
      - name: Download specific file
        uses: actions/download-artifact@v4
        with:
          name: dist-files
          path: dist/
          pattern: ${{ matrix.file }}

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.build-version-publish.outputs.upload_url }}
          asset_path: dist/${{ matrix.file }}
          asset_name: ${{ matrix.file }}
          asset_content_type: application/octet-stream

      - name: Confirm upload
        run: |
          echo "::notice::📎 Successfully uploaded ${{ matrix.file }} to GitHub release"
